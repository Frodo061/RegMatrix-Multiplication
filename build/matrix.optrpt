Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.0.117 Build 20180804

Compiler options: -I/share/apps/papi/5.5.0/include -c -o build/matrix.o -lm -O3 -Wall -Wextra -std=c++11 -Wno-unused-parameter -qopt-report=3 -qopenmp -L/share/apps/papi/5.5.0/lib -lpapi -no-vec -DDOT_PR_3

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: fillMatrixA(float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillMatrixA(float *, unsigned int)) [1] src/matrix.cpp(3,42)
  -> EXTERN: (6,29) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(4,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() (6:29) and call:rand() (6:29)

   LOOP BEGIN at src/matrix.cpp(5,3)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(3,42):remark #34051: REGISTER ALLOCATION : [_Z11fillMatrixAPfj] src/matrix.cpp:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      21
            Global    :      16
            Local     :       5
        Regenerable   :       2
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.40e+00 ~ 1.6%]
            Writes    :       6 [2.40e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fillMatrixB(float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillMatrixB(float *, unsigned int)) [2] src/matrix.cpp(11,42)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(12,2)
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag

   LOOP BEGIN at src/matrix.cpp(13,3)
      remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(13,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(11,42):remark #34051: REGISTER ALLOCATION : [_Z11fillMatrixBPfj] src/matrix.cpp:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fillMatrixC(float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillMatrixC(float *, unsigned int)) [3] src/matrix.cpp(19,40)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(20,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (21:3) and mc[i*n+j] (22:4)

   LOOP BEGIN at src/matrix.cpp(21,3)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at src/matrix.cpp(21,3)
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=24
      LOOP END

      LOOP BEGIN at src/matrix.cpp(21,3)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(21,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
src/matrix.cpp(21,3):remark #34026: call to memset implemented as a call to optimized library version
src/matrix.cpp(19,40):remark #34051: REGISTER ALLOCATION : [_Z11fillMatrixCPfj] src/matrix.cpp:19

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      30
            Global    :      15
            Local     :      15
        Regenerable   :       2
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.40e+00 ~ 2.0%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mcopy(float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mcopy(float *, float *, unsigned int)) [4] src/matrix.cpp(27,44)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(28,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between m[i*n+j] (29:3) and c[i*n+j] (30:4)

   LOOP BEGIN at src/matrix.cpp(29,3)
      remark #25401: memcopy(with guard) generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at src/matrix.cpp(29,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(29,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(29,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
src/matrix.cpp(29,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
src/matrix.cpp(29,3):remark #34026: call to memcpy implemented as a call to optimized library version
src/matrix.cpp(27,44):remark #34051: REGISTER ALLOCATION : [_Z5mcopyPfS_j] src/matrix.cpp:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      43
            Global    :      19
            Local     :      24
        Regenerable   :       1
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [1.54e+01 ~ 4.4%]
            Writes    :       8 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: transpose(float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (transpose(float *, unsigned int)) [5] src/matrix.cpp(35,38)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(37,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between m[i*n+j] (39:13) and m[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between m[i*n+j] (39:13) and m[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(35,38):remark #34051: REGISTER ALLOCATION : [_Z9transposePfj] src/matrix.cpp:35

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      43
            Global    :      18
            Local     :      25
        Regenerable   :       1
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: regularMatrixMult(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (regularMatrixMult(float *, float *, float *, unsigned int)) [6] src/matrix.cpp(47,70)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(49,2)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [52 -> (Flow) 52]
   remark #25447: Dependence found between following statements:  [52 -> (Anti) 52]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 1 3 2 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between mc[i*n+j] (52:17) and ma[i*n+k] (52:17)

   LOOP BEGIN at src/matrix.cpp(50,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between mc[i*n+j] (52:17) and ma[i*n+k] (52:17)

      LOOP BEGIN at src/matrix.cpp(51,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between mc[i*n+j] (52:17) and mc[i*n+j] (52:17)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(51,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(47,70):remark #34051: REGISTER ALLOCATION : [_Z17regularMatrixMultPfS_S_j] src/matrix.cpp:47

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :       2
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.2%]
            Writes    :       4 [1.60e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: regularMatrixMultTr(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (regularMatrixMultTr(float *, float *, float *, unsigned int)) [7] src/matrix.cpp(59,71)
  -> INLINE: (60,5) transpose(float *, unsigned int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(60,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(60,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(60,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(61,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/matrix.cpp(62,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/matrix.cpp(63,4)
      <Multiversioned v1>
         remark #25228: Loop multiversioned for Data Dependence
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25439: unrolled with remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
         remark #25457: Number of partial sums replaced: 1
      LOOP END

      LOOP BEGIN at src/matrix.cpp(63,4)
      <Remainder, Multiversioned v1>
      LOOP END

      LOOP BEGIN at src/matrix.cpp(63,4)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(63,4)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(59,71):remark #34051: REGISTER ALLOCATION : [_Z19regularMatrixMultTrPfS_S_j] src/matrix.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     121
            Global    :      41
            Local     :      80
        Regenerable   :       2
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [3.60e+00 ~ 0.2%]
            Writes    :       8 [2.00e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: regularMatrixMultBl(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (regularMatrixMultBl(float *, float *, float *, unsigned int)) [8] src/matrix.cpp(71,70)
  -> INLINE: (72,5) transpose(float *, unsigned int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(72,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(72,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(72,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(74,5)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [80 -> (Output) 80]
   remark #25447: Dependence found between following statements:  [80 -> (Flow) 80]
   remark #25447: Dependence found between following statements:  [80 -> (Anti) 80]
   remark #25447: Dependence found between following statements:  [77 -> (Flow) 77]
   remark #25447: Dependence found between following statements:  [77 -> (Flow) 80]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 3 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (80:25) and mc[i*n+j] (80:25)

   LOOP BEGIN at src/matrix.cpp(75,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (80:25) and mc[i*n+j] (80:25)

      LOOP BEGIN at src/matrix.cpp(76,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (80:25) and mc[i*n+j] (80:25)

         LOOP BEGIN at src/matrix.cpp(77,17)
            remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
            remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
            remark #15423: loop was not vectorized: has only one iteration
            remark #25436: completely unrolled by 1  

            LOOP BEGIN at src/matrix.cpp(79,21)
               remark #15423: loop was not vectorized: has only one iteration
               remark #25436: completely unrolled by 1  
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(71,70):remark #34051: REGISTER ALLOCATION : [_Z19regularMatrixMultBlPfS_S_j] src/matrix.cpp:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      61
            Global    :      27
            Local     :      34
        Regenerable   :       1
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [2.70e+00 ~ 0.1%]
            Writes    :       8 [2.00e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matrixMultIndexOrder1(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matrixMultIndexOrder1(float *, float *, float *, unsigned int)) [9] src/matrix.cpp(85,73)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(86,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/matrix.cpp(87,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/matrix.cpp(88,13)
      <Multiversioned v1>
         remark #25228: Loop multiversioned for Data Dependence
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(88,13)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(88,13)
      <Remainder, Multiversioned v2>
      LOOP END

      LOOP BEGIN at src/matrix.cpp(88,13)
      <Remainder, Multiversioned v1>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(85,73):remark #34051: REGISTER ALLOCATION : [_Z21matrixMultIndexOrder1PfS_S_j] src/matrix.cpp:85

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     172
            Global    :      31
            Local     :     141
        Regenerable   :       2
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       9 [3.29e+01 ~ 1.8%]
            Writes    :       9 [1.13e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matrixMultIndexOrder1Bl(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matrixMultIndexOrder1Bl(float *, float *, float *, unsigned int)) [10] src/matrix.cpp(96,75)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(97,5)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [102 -> (Output) 102]
   remark #25447: Dependence found between following statements:  [102 -> (Flow) 102]
   remark #25447: Dependence found between following statements:  [102 -> (Anti) 102]
   remark #25447: Dependence found between following statements:  [100 -> (Flow) 100]
   remark #25447: Dependence found between following statements:  [100 -> (Flow) 102]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 3 1 2 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (102:25) and mc[i*n+j] (102:25)

   LOOP BEGIN at src/matrix.cpp(98,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (102:25) and mc[i*n+j] (102:25)

      LOOP BEGIN at src/matrix.cpp(99,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (102:25) and mc[i*n+j] (102:25)

         LOOP BEGIN at src/matrix.cpp(100,17)
            remark #15423: loop was not vectorized: has only one iteration
            remark #25436: completely unrolled by 1  

            LOOP BEGIN at src/matrix.cpp(101,21)
               remark #15423: loop was not vectorized: has only one iteration
               remark #25436: completely unrolled by 1  
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(96,75):remark #34051: REGISTER ALLOCATION : [_Z23matrixMultIndexOrder1BlPfS_S_j] src/matrix.cpp:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r15 zmm0]
        
    Routine temporaries
        Total         :      29
            Global    :      18
            Local     :      11
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.2%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matrixMultIndexOrder2(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matrixMultIndexOrder2(float *, float *, float *, unsigned int)) [11] src/matrix.cpp(111,73)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(112,5)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [115 -> (Output) 115]
   remark #25447: Dependence found between following statements:  [115 -> (Flow) 115]
   remark #25447: Dependence found between following statements:  [115 -> (Anti) 115]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 3 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between mc[i*n+j] (115:17) and mb[k*n+j] (115:17)

   LOOP BEGIN at src/matrix.cpp(113,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between mc[i*n+j] (115:17) and mc[i*n+j] (115:17)

      LOOP BEGIN at src/matrix.cpp(114,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between mc[i*n+j] (115:17) and mb[k*n+j] (115:17)
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(114,13)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(111,73):remark #34051: REGISTER ALLOCATION : [_Z21matrixMultIndexOrder2PfS_S_j] src/matrix.cpp:111

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      78
            Global    :      32
            Local     :      46
        Regenerable   :       2
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      22 [3.92e+02 ~ 12.4%]
            Writes    :      17 [1.66e+02 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matrixMultIndexOrder2Tr(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matrixMultIndexOrder2Tr(float *, float *, float *, unsigned int)) [12] src/matrix.cpp(123,75)
  -> INLINE: (124,5) transpose(float *, unsigned int)
  -> INLINE: (125,5) transpose(float *, unsigned int)
  -> INLINE: (134,5) transpose(float *, unsigned int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(124,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between ma[i*n+j] (39:13) and ma[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(124,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between ma[i*n+j] (39:13) and ma[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(124,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(125,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(125,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(125,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(127,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/matrix.cpp(128,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/matrix.cpp(129,13)
      <Multiversioned v1>
         remark #25228: Loop multiversioned for Data Dependence
         remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(129,13)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at src/matrix.cpp(129,13)
      <Remainder, Multiversioned v2>
      LOOP END

      LOOP BEGIN at src/matrix.cpp(129,13)
      <Remainder, Multiversioned v1>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(134,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mc[i*n+j] (39:13) and mc[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(134,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mc[i*n+j] (39:13) and mc[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(134,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(123,75):remark #34051: REGISTER ALLOCATION : [_Z23matrixMultIndexOrder2TrPfS_S_j] src/matrix.cpp:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     268
            Global    :      58
            Local     :     210
        Regenerable   :       2
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [1.00e+01 ~ 0.3%]
            Writes    :       4 [7.50e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matrixMultIndexOrder2Bl(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matrixMultIndexOrder2Bl(float *, float *, float *, unsigned int)) [13] src/matrix.cpp(138,73)
  -> INLINE: (139,5) transpose(float *, unsigned int)
  -> INLINE: (140,5) transpose(float *, unsigned int)
  -> INLINE: (149,5) transpose(float *, unsigned int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(139,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between ma[i*n+j] (39:13) and ma[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(139,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between ma[i*n+j] (39:13) and ma[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(139,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(140,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(140,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mb[i*n+j] (39:13) and mb[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(140,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(142,5)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [147 -> (Output) 147]
   remark #25447: Dependence found between following statements:  [147 -> (Flow) 147]
   remark #25447: Dependence found between following statements:  [147 -> (Anti) 147]
   remark #25447: Dependence found between following statements:  [145 -> (Flow) 145]
   remark #25447: Dependence found between following statements:  [145 -> (Flow) 147]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 3 1 2 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between mc[j*n+i] (147:25) and mc[j*n+i] (147:25)

   LOOP BEGIN at src/matrix.cpp(143,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between mc[j*n+i] (147:25) and mc[j*n+i] (147:25)

      LOOP BEGIN at src/matrix.cpp(144,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between mc[j*n+i] (147:25) and mc[j*n+i] (147:25)

         LOOP BEGIN at src/matrix.cpp(145,17)
            remark #15423: loop was not vectorized: has only one iteration
            remark #25436: completely unrolled by 1  

            LOOP BEGIN at src/matrix.cpp(146,21)
               remark #15423: loop was not vectorized: has only one iteration
               remark #25436: completely unrolled by 1  
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/matrix.cpp(37,5) inlined into src/matrix.cpp(149,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between mc[i*n+j] (39:13) and mc[j*n+i] (41:13)

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(149,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between mc[i*n+j] (39:13) and mc[j*n+i] (41:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at src/matrix.cpp(38,9) inlined into src/matrix.cpp(149,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(138,73):remark #34051: REGISTER ALLOCATION : [_Z23matrixMultIndexOrder2BlPfS_S_j] src/matrix.cpp:138

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     125
            Global    :      45
            Local     :      80
        Regenerable   :       1
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [5.00e+00 ~ 0.2%]
            Writes    :       3 [7.50e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: validate(float *, float *, float *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (validate(float *, float *, float *, unsigned int)) [14] src/matrix.cpp(153,60)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at src/matrix.cpp(156,5)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at src/matrix.cpp(158,9)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/matrix.cpp(159,13) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

src/matrix.cpp(153,60):remark #34051: REGISTER ALLOCATION : [_Z8validatePfS_S_j] src/matrix.cpp:153

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      23
            Global    :      15
            Local     :       8
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [15] <compiler generated>
  -> EXTERN: /share/apps/gcc/5.3.0/include/c++/5.3.0/iostream:(74,25) __cxa_atexit(void (*)(void *), void *, void *)
  -> EXTERN: /share/apps/gcc/5.3.0/include/c++/5.3.0/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
